---
# Source: virtualnode2/templates/namespace.yml
apiVersion: v1
kind: Namespace
metadata:
  name: vn2
---
# Source: virtualnode2/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-virtualnode2-virtual-node2-helm
  namespace: vn2
  labels:
    helm.sh/chart: virtualnode2-0.0.2
    app.kubernetes.io/name: virtualnode2
    app.kubernetes.io/instance: aci
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: virtualnode2/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: virtual-node-admission-controller
  namespace: vn2
data:
  # Generated by (NOTE VN2 BELOW NEEDS TO MATCH NAMESPACE in .Values.namespace!)
  # openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365 -subj "/CN=virtual-node-admission-controller.vn2.svc" -addext "subjectAltName = DNS:virtual-node-admission-controller.vn2.svc"
  # openssl rsa -in key.pem -text > server.pem
  # and then base64 encoded server.pem as key, cert.pem as crt (cat thefile.pem | base64)
  # Not sure this should be left in HELM... or even as a secret, could generate via init and leave on disk directly?
  tls.crt: 
  tls.key: 
type: Opaque
---
# Source: virtualnode2/templates/clusterrolebinding.yml
apiVersion: "rbac.authorization.k8s.io/v1"
kind: ClusterRoleBinding
metadata:
  name: aci-virtualnode2-virtual-node2-helm
  labels:
    helm.sh/chart: virtualnode2-0.0.2
    app.kubernetes.io/name: virtualnode2
    app.kubernetes.io/instance: aci
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: aci-virtualnode2-virtual-node2-helm
  namespace: vn2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
# Source: virtualnode2/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: virtual-node-admission-controller
  namespace: vn2
spec:
  ports:
  - protocol: TCP
    port: 443
    targetPort: 19865
  selector:
    app.kubernetes.io/name: "admissioncontroller"
    app.kubernetes.io/instance: aci
  type: ClusterIP
---
# Source: virtualnode2/templates/admissioncontroller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "virtual-node-admission-controller"
  namespace: vn2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "admissioncontroller"
      app.kubernetes.io/instance: aci
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "admissioncontroller"
        app.kubernetes.io/instance: aci
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName:  "aci-virtualnode2-virtual-node2-helm" 
      containers:
        - name: admissioncontroller
          image: mcr.microsoft.com/aci/virtual-node-2-admission-controller:main_20240920.2
          env:
            - name: SECRET_NAME
              value: virtual-node-admission-controller
            - name: SECRET_NAMESPACE
              value: vn2
            - name: ADMISSION_CONTROLLER_NAME
              value: virtual-node-admission-controller
            - name: SERVICE_DNS_NAME
              value: "virtual-node-admission-controller.vn2.svc"
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: virtualnode2/templates/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: aci-virtualnode2
  namespace: vn2
  labels:
    helm.sh/chart: virtualnode2-0.0.2
    app.kubernetes.io/name: virtualnode2
    app.kubernetes.io/instance: aci
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: virtualnode2
      app.kubernetes.io/instance: aci
  template:
    metadata:
      labels:
        app.kubernetes.io/name: virtualnode2
        app.kubernetes.io/instance: aci
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName:  "aci-virtualnode2-virtual-node2-helm" 
      securityContext:
        {}
      initContainers:
        - name: init-config
          image: mcr.microsoft.com/aci/virtual-node-2-init-config:main_20240920.2
          imagePullPolicy: Always
          env:
            - name: serviceaccountname
              value: "aci-virtualnode2-virtual-node2-helm"
            - name: NodeName
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - mountPath: /kubeconfig/
              name: kube-config-volume
          args: ["/initcontainer/init.sh"]
      containers:
        - name: kubelet
          resources:
            requests:
              cpu: 1
              memory: 4G
            limits:
              cpu: 3
              memory: 12G
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: true
          image: mcr.microsoft.com/aci/virtual-node-2-kubelet:main_20240920.2
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /var/lib/kubelet/
              name: kubelet-root-dir
              mountPropagation: Bidirectional
            - mountPath: /tmp/
              name: socket-volume
            - mountPath: /kubeconfig/
              name: kube-config-volume
            - mountPath: /etc/aks/azure.json
              name: aks-credential
            - mountPath: /etc/ssl/certs/ca-certificates.crt
              name: ca-certificates
            - mountPath: /var/log/pods
              name: container-logs
          command:
            - sh
            - '-c'
            - >-            
              while [ ! -f /tmp/proxycriReady ]; do echo "waiting on proxyCri"; sleep 1; done;
              mkdir -p /sys/fs/cgroup/$(NodeName);
              mkdir -p /sys/fs/cgroup/cpuset/$(NodeName);
              mkdir -p /sys/fs/cgroup/cpu,cpuacct/$(NodeName);
              mkdir -p /sys/fs/cgroup/pids/$(NodeName);
              mkdir -p /sys/fs/cgroup/memory/$(NodeName);
              mkdir -p /sys/fs/cgroup/systemd/$(NodeName);
              mkdir -p /sys/fs/cgroup/hugetlb/$(NodeName);
              sleep 3;
              /usr/local/bin/kubelet
              --hostname-override=$(NodeName)
              --kubeconfig=/kubeconfig/kubelet.conf
              --azure-container-registry-config=/etc/aks/azure.json
              --config=/kubeconfig/config.yaml
              --authorization-mode=AlwaysAllow
              --runtime-cgroups=$(NodeName)
              --max-pods=200
              --runtime-request-timeout=5m0s
              --node-labels='microsoft.containerinstance.virtualnode=true,kubernetes.azure.com/managed=false,type=virtual-kubelet,virtualization=virtualnode2,microsoft.containerinstance.virtualnode.podname=$(NodeName),microsoft.containerinstance.virtualnode.podns=$(PodNS),'
              --register-with-taints='virtual-kubelet.io/provider=azure:NoSchedule'
              --cgroup-root=$(NodeName)
              --enforce-node-allocatable=
              --cgroups-per-qos=false
              --anonymous-auth=true
              --node-ip=$(NodeIP)
              --container-runtime-endpoint=/tmp/vcri.sock
              --image-service-endpoint=/tmp/vcri.sock
              --v=8
          env:
            - name: NodeIP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NodeName
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PodNS
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources: {}
        - name: virtualcsi
          resources:
            requests:
              cpu: 0
              memory: 0G
            limits:
              cpu: 3
              memory: 12G
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: true
          image: mcr.microsoft.com/aci/virtual-node-2-virtual-csi:main_20240920.2
          command:
            - /go/bin/virtual-csi
          args:
            - >-
              -endpoint=unix:///var/lib/kubelet/plugins/file.csi.azure.com/csi.sock
          imagePullPolicy: Always
          volumeMounts:
            - name: kubelet-root-dir
              mountPath: /var/lib/kubelet
        - name: crisocketotcpadapter
          resources:
            requests:
              cpu: 0
              memory: 0G
            limits:
              cpu: 3
              memory: 12G
          image: mcr.microsoft.com/aci/virtual-node-2-cri-socket-adapter:main_20240920.2
          env:
            - name: ListenEndpoint
              value: /tmp/vcri.sock
          volumeMounts:
            - name: socket-volume
              mountPath: /tmp/
            - name: aks-credential
              mountPath: /etc/aks/azure.json
            - name: kubelet-root-dir
              mountPath: /kubelet/
            - name: container-logs
              mountPath: /var/log/pods
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
        - name: proxycri
          resources:
            requests:
              cpu: 2
              memory: 8G
            limits:
              cpu: 3
              memory: 12G
          image: mcr.microsoft.com/aci/virtual-node-2-proxy-cri:main_20240920.2
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: true
          volumeMounts:
            - name: socket-volume
              mountPath: /tmp/
            - name: aks-credential
              mountPath: /etc/aks/azure.json
            - name: kubelet-root-dir
              mountPath: /var/lib/kubelet/
              mountPropagation: Bidirectional
            - name: container-logs
              mountPath: /var/log/pods
            - mountPath: /kubeconfig/
              name: kube-config-volume   
          env:
            - name: VirtualNode_SandboxProvider_StandbyPools_Cpu
              value: "3.5"
            - name: VirtualNode_SandboxProvider_StandbyPools_Memory
              value: "15"
            - name: VirtualNode_SandboxProvider_StandbyPools_MaxReadyCapacity
              value: "10"
            - name: VirtualNode_SandboxProvider_StandbyPools_CcePolicy
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_providerid
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_gcsaccount
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_gcsnamespace
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_containername
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_configversion
              value: ""
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_gcsenvironment
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_payloadtype
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_FPL_custommetadata
              value: 
            - name: VirtualNode_SandboxProvider_StandbyPools_Zones
              value: ""
            - name: SandboxProviderType
              value: OnDemand
            - name: Subnets
              value: cg
            - name: AKS_CREDENTIAL_LOCATION
              value: /etc/aks/azure.json
            - name: ListenEndpoint
              value: /tmp/vcri2.sock
            - name: Subnet
              value: cg
            - name: MountHostImage
              value: mcr.microsoft.com/aci/virtual-node-2-mount-host:main_20240920.2
            - name: NodeName
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
        - name: node-driver-registrar
          resources:
            requests:
              cpu: 0
              memory: 0G
            limits:
              cpu: 3
              memory: 12G
          image: mcr.microsoft.com/oss/kubernetes-csi/csi-node-driver-registrar:v2.8.0
          imagePullPolicy: Always
          volumeMounts:
            - name: kubelet-root-dir
              mountPath: /var/lib/kubelet/
            - name: kubelet-root-dir
              mountPath: /registration
              subPath: plugins_registry
          args: 
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
            - "--v=2"
          env:
            - name: ADDRESS
              value: "/var/lib/kubelet/plugins/file.csi.azure.com/csi.sock"
            - name: DRIVER_REG_SOCK_PATH
              value: "/var/lib/kubelet/plugins/file.csi.azure.com/csi.sock"              
      volumes:
        - name: kubelet-root-dir
          emptyDir:
            medium: Memory
        - name: socket-volume
          emptyDir: {}
        - name: kube-config-volume
          emptyDir: {}
        - name: container-logs
          emptyDir: {}
        - name: ca-certificates
          hostPath:
            path: /etc/ssl/certs/ca-certificates.crt
            type: File
        - name: aks-credential
          hostPath:
            path: /etc/kubernetes/azure.json
            type: File
        - name: credentials
          secret:
            secretName: virtual-node-admission-controller
            defaultMode: 420
      nodeSelector:
        kubernetes.io/os: linux
  podManagementPolicy: "Parallel"
---
# Source: virtualnode2/templates/webhook.yaml
# If admission controller replica count is set to 0, don't create the webhook
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: virtual-node-admission-controller
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: virtual-node-admission-controller
      namespace: vn2
      path: "/node"
  failurePolicy: Ignore
  matchPolicy: Equivalent
  name: virtual-node-admission-controller-node-mutating-webhook.azmk8s.io
  namespaceSelector: {}
  objectSelector: {}
  reinvocationPolicy: Never
  rules:
  - apiGroups:
    - ''
    apiVersions:
    - v1
    operations:
    - "*"
    resources:
    - nodes
    - nodes/status
    scope: "*"
  sideEffects: NoneOnDryRun
  timeoutSeconds: 5
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: virtual-node-admission-controller
      namespace: vn2
      path: "/pod"
  failurePolicy: Ignore
  matchPolicy: Equivalent
  name: virtual-node-admission-controller-pod-mutating-webhook.azmk8s.io
  namespaceSelector: {}
  objectSelector: {}
  reinvocationPolicy: Never
  rules:
  - apiGroups:
    - ''
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
    scope: "*"
  sideEffects: NoneOnDryRun
  timeoutSeconds: 5
